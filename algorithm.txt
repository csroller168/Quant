"""
Copyright Chris Short 2016
Use is unauthorized without written permission

    # TODO
    # 1. filter S&P 500 via static list (fetcher)
    # 2. filter by 4% 5 yr avg. div yld
    #    Either use custom factor (see https://www.quantopian.com/posts/fundamental-history-based-algo#5616e27ea8e03d7580000155)
    #    ... or, query quandl for each stock
    # 3. add unemployment pullout signal
    # 4. add momentum pullout signal

"""
from quantopian.algorithm import attach_pipeline, pipeline_output
from quantopian.pipeline import Pipeline
from quantopian.pipeline.classifiers.morningstar import Sector
from quantopian.pipeline.data import morningstar  
 
UTILITIES_SECTOR = 207

def initialize(context):
    """
    Called once at the start of the algorithm.
    """   
    # Rebalance monthly after unemployment rate announced,
    # 1 minute after market open.
    schedule_function(my_rebalance,
                      date_rules.month_start(days_offset=6),
                      time_rules.market_open(minutes=1))
     
    # Record tracking variables at the end of each day.
    schedule_function(my_record_vars, date_rules.every_day(), time_rules.market_close())
     
    pipe = Pipeline()  
    attach_pipeline(pipe, name='my_pipeline')  
    
    # Screen for no utilities and high dividend
    sector_code = morningstar.asset_classification.morningstar_sector_code.latest
    sector_filter = (sector_code != UTILITIES_SECTOR)
    
    div_yld = morningstar.valuation_ratios.dividend_yield.latest
    div_filter = (div_yld > .04)
    
    pipe.set_screen(sector_filter & div_filter)
    
    debtToEquity = morningstar.operation_ratios.long_term_debt_equity_ratio.latest
    pipe.add(debtToEquity, 'debtToEquity')
    
    context.my_leverage = 1

def before_trading_start(context, data):  
    pass
     
def my_assign_weights(context, data):
    """
    Assign weights to securities that we want to order.
    TBD: Weight according to optimal sharpe ratio
    """
    pass
 
def my_rebalance(context,data):  
    my_pipeline = pipeline_output('my_pipeline')  
    context.my_pipeline = my_pipeline.sort_values(by='debtToEquity', ascending=False).iloc[:7]
    context.security_list = pipeline_output('my_pipeline').index[:7]
    
    """
    Execute orders according to our schedule_function() timing. 
    """
    for stock in context.portfolio.positions.iterkeys():  
        if stock not in context.security_list:  
            order_target(stock, 0)  
    
    long_weight = 1.0 / float(len(context.security_list))  
    for long_stock in context.security_list:  
        if data.can_trade(long_stock):  
            order_target_percent(long_stock, long_weight)
    pass
 
def my_record_vars(context, data):
    """
    Plot variables at the end of each day.
    """
    long_count = 0
    short_count = 0
    cash = context.portfolio.cash
    portfolio_value = context.portfolio.portfolio_value

    for position in context.portfolio.positions.itervalues():
        if position.amount > 0:
            long_count += 1
        if position.amount < 0:
            short_count += 1

    # Plot the counts
    record(num_long=long_count, num_short=short_count, cash=cash, portfolio_value=portfolio_value)
    pass
 
def handle_data(context,data):
    """
    Called every minute.
    TBD: Delete?
    """
    pass
