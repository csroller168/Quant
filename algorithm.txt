"""
Copyright Chris Short 2017
Use is unauthorized without written permission

    # TODO
    - experiment with screening short_stocks with multiple calls to sort on a metric, then taking most favorable 80% (0.8 * len(short_stocks)
    - allow shorts during market drawdown
        - consider buy spy and short my list
    - normalize leverage dynamically
    Low priority:
    - for next algorithm, try the optimizer API
    - consider vary SPY short % with real time beta
     - Consider change momentum indicator to mavg(14) <= mavg(50)
     - Consider reduce leverage if one indicator says to sell but other doesn't
"""
from quantopian.algorithm import attach_pipeline, pipeline_output
from quantopian.pipeline import Pipeline, CustomFactor
from quantopian.pipeline.classifiers.morningstar import Sector
from quantopian.pipeline.data import morningstar
from quantopian.pipeline.data.quandl import fred_unrate
from quantopian.pipeline.data.builtin import USEquityPricing
import math
import pandas as pd
import numpy as np
 
UTILITIES_SECTOR = 207

REBALANCE_DAY = 6
NUM_LONG = 7
NUM_SHORT = 7

class CurrUnemplFactor(CustomFactor):
    window_length = 1
    inputs = [fred_unrate.value]
    
    def compute(self, today, assets, out, unempl):
        out[:] = unempl
        
def initialize(context):
    context.security_list = []
    context.short_security_list = []
    context.portfolioCloses = np.array([])
    context.benchmarkCloses = np.array([])
    context.spy = sid(8554)  
    context.tlt = sid(23921)  
    context.beta = 1.0  # Assumed starting beta  
    context.beta_target = 0.0  # Target any Beta you wish  
    context.beta_limit = .05 # Pos/neg threshold, balance only outside of this either side of target  
    context.spy_limit_hi = .95 # Max ratio of spy to portfolio  
    context.spy_limit_lo = 1.0 - context.spy_limit_hi  
    context.beta_df = pd.DataFrame([], columns=['pf', 'spy']) 
    
    """
    Called once at the start of the algorithm.
    """   
    # Recalculate unemployment indicator once per month
    schedule_function(recalc_unempl,
                      date_rules.month_start(days_offset=REBALANCE_DAY),
                      time_rules.market_open(minutes=1))
     
    # Record tracking variables at the end of each day.
    schedule_function(record_vars, date_rules.every_day(), time_rules.market_close())
    
    # Try to execute every day to cover unexecuted orders
    schedule_function(execute_orders,
                      date_rules.every_day(),
                      time_rules.market_open(minutes=5))
    
    # Initialize unemployment rate variables
    context.unempl = build_unempl_collection()
    context.unemplSet = False
    context.momentumUnfavorable = False
    context.unemplUnfavorable = False
    context.firstDay = True
    
    # Set up long pipeline
    pipe = Pipeline()  
    attach_pipeline(pipe, name='my_pipeline')
    build_pipeline(pipe)

def build_pipeline(pipe):
    # Add employment data and momentum
    pipe.add(CurrUnemplFactor(), 'unempl')
    
    # Screen for no utilities and minimum volume
    sector_code = morningstar.asset_classification.morningstar_sector_code.latest
    sector_filter = (sector_code != UTILITIES_SECTOR)
    
    volume = USEquityPricing.volume.latest
    volume_filter = (volume > 10000)
    
    # Blacklist stocks
    symbol_filter = ~(morningstar.share_class_reference.symbol.latest.matches('TPC')) & ~(morningstar.share_class_reference.symbol.latest.matches('NFLX'))
    
    # Screen for high current dividend yield
    div_yld = morningstar.valuation_ratios.dividend_yield.latest
    high_div_filter = (div_yld > .04)
    no_div_filter = ~(div_yld > 0.0)
    pipe.add(div_yld, 'div_yld')
    
    # Screen for approximation of S&P 500
    mkt_cap = morningstar.valuation.market_cap.latest
    large_cap_filter = (mkt_cap > 4000000000)
    country_id = morningstar.company_reference.country_id.latest
    exchange_id = morningstar.company_reference.primary_exchange_id.latest
    pipe.add(mkt_cap, 'mkt_cap')
    pipe.add(country_id, 'country_id')
    pipe.add(exchange_id, 'exchange_id')
    
    # Track financial metrics
    debtToEquity = morningstar.operation_ratios.long_term_debt_equity_ratio.latest
    pipe.add(debtToEquity, 'debtToEquity')
    
    roe = morningstar.operation_ratios.roe.latest
    pipe.add(roe, 'roe')
    pe = morningstar.valuation_ratios.pe_ratio.latest
    pipe.add(pe, 'pe')
    close = USEquityPricing.close.latest
    pipe.add(close, 'close')
    ebit_mgn = morningstar.operation_ratios.ebitda_margin.latest
    pipe.add(ebit_mgn, 'ebit_mgn')
    revenue_growth = morningstar.operation_ratios.revenue_growth.latest
    pipe.add(revenue_growth, 'revenue_growth')
    growth_score = morningstar.asset_classification.growth_score.latest
    pipe.add(growth_score, 'growth_score')
    
    
    pipe.set_screen(sector_filter &
                    volume_filter &
                    symbol_filter &
                    #large_cap_filter &
                    (high_div_filter | no_div_filter))

def rebalance(context, data, my_pipeline):
    # Build long and short stock lists
    long_stocks = my_pipeline[
        (my_pipeline.country_id == "USA") & 
        ((my_pipeline.exchange_id == "NAS") | (my_pipeline.exchange_id == "NYSE")) &
        (my_pipeline.div_yld > 0.04) &
        (my_pipeline.ebit_mgn > 0.03) &
        (my_pipeline.mkt_cap > 4000000000) &
        (data.can_trade(my_pipeline.index))].sort_values(by='mkt_cap', ascending=False).iloc[:100]
    context.security_list = long_stocks.sort_values(by='debtToEquity', ascending=True).index[:NUM_LONG]
    
    short_stocks = my_pipeline[
        (my_pipeline.country_id == "USA") & 
        ((my_pipeline.exchange_id == "NAS") | 
        (my_pipeline.exchange_id == "NYSE")) &
        ~(my_pipeline.div_yld > 0.0) &
        (my_pipeline.mkt_cap < 15000000000) &
        (my_pipeline.mkt_cap > 100000000) &
        (my_pipeline.close > 10) &
        #(my_pipeline.pe > 15) &
        (my_pipeline.debtToEquity > 0.5) &
        #(my_pipeline.ebit_mgn < 0.45) &
        #(my_pipeline.growth_score < 90) &
        #####(my_pipeline.revenue_growth < 0.02) &
        (my_pipeline.roe < 0) &
        #(data.history(my_pipeline.index, 'price', 7, '1d').mean() < data.history(my_pipeline.index, 'price', 21, '1d').mean()) &
        (data.can_trade(my_pipeline.index))].sort_values(by='pe', ascending=False).iloc[:int(NUM_SHORT*5)]
    context.short_security_list = short_stocks.sort_values(by='revenue_growth', ascending=True).index[:NUM_SHORT]

def before_trading_start(context, data):
    """
    Filter pipeline output to security list
    NOTE:  I'm doing this here since it takes a while and this apparently has a longer timeout than rebalance()
    """
    my_pipeline = pipeline_output('my_pipeline')
    
    context.beta_df = context.beta_df.append({    # Beta calc prep  
        'pf' : context.portfolio.portfolio_value,  
        'spy': data.current(context.spy, 'price')}, ignore_index=True)  
    context.beta_df['spy_chg'] = context.beta_df.spy.pct_change()  
    context.beta_df[ 'pf_chg'] = context.beta_df.pf.pct_change()  
    context.beta_df = context.beta_df.ix[-31:]    # trim to one month
    
    # Cache unemployment data once per month
    if get_datetime().day < REBALANCE_DAY:
        context.unemplSet = False
    if get_datetime().day >= REBALANCE_DAY and context.unemplSet == False:
        context.unempl.append(my_pipeline['unempl'][0])
        context.unemplSet = True
        rebalance(context, data, my_pipeline)
    elif context.firstDay:
        rebalance(context, data, my_pipeline)
        context.firstDay = False

def is_unempl_unfavorable(unempl):
    currUnempl = unempl[-1]
    pastUnempl = (unempl[-4] + unempl[-3] + unempl[-2]) / 3
    unemplUnfavorable = currUnempl > pastUnempl
    return unemplUnfavorable

def recalc_unempl(context,data):
    
    # Calculate unemployment indicator
    context.unemplUnfavorable = is_unempl_unfavorable(context.unempl)
    
    # Calculate momentum indicator
    spy = symbol('SPY')
    mavgShort = data.history(spy, 'price', 50, '1d').mean()
    mavgLong = data.history(spy, 'price', 200, '1d').mean()
    context.momentumUnfavorable = mavgShort <= mavgLong
    
def execute_orders(context,data):
    sell_everything = False
    
    # Short SPY according to indicators
    long_base = 1.0
    short_base = -0.5
    if context.momentumUnfavorable and context.unemplUnfavorable:
        # order_target_percent(symbol('SPY'), -1.0)
        long_base = 0.0
        short_base = -0.8
        #sell_everything = True
    #elif context.momentumUnfavorable or context.unemplUnfavorable:
    #    order_target_percent(symbol('SPY'), -0.25)
    #else:
    #    order_target_percent(symbol('SPY'), -0.2)
    #    long_base = 1.1
    #    short_base = -1.1
    
    # Balance beta with SPY/TLT positions
    context.beta = estimateBeta(context.portfolioCloses, context.benchmarkCloses)
    bzat = context.beta - context.beta_target
    if bzat < -context.beta_limit or bzat > context.beta_limit:
        pos_val = context.portfolio.positions_value  
        spy_val = context.portfolio.positions[context.spy].amount * data.current(context.spy, 'price')  
        spy_ratio = spy_val / pos_val
        
        # Reduce spy & increase tlt or visa-versa  
        # The further away from target Beta, the stronger the adjustment.  
        # https://www.quantopian.com/posts/scaling for explanation of next line ...  
        temperance = scale(abs(bzat), 0, .30, .35, .80) # Not straight Beta, a portion of it.  
        adjust = max(context.spy_limit_lo, spy_ratio - (bzat * temperance))  
        adjust = min(context.spy_limit_hi, adjust)  # spy ratio no higher than spy_limit_hi  
        order_target_percent(context.spy, adjust)  
        order_target_percent(context.tlt, 1.0 - adjust) # Remainder for tlt
    
    # Sell everything if needed
    if sell_everything:
        for stock in context.portfolio.positions.iterkeys():
            if data.can_trade(stock) and \
                stock.symbol != 'SPY' and \
                stock.symbol != 'TLT':
                order_target(stock, 0)
        return
    
    # Cover stocks no longer in list
    for stock in context.portfolio.positions.iterkeys():  
        if stock not in context.security_list and \
            stock not in context.short_security_list and \
            stock.symbol != 'SPY'  and \
            stock.symbol != 'TLT' and \
            data.can_trade(stock):
                order_target(stock, 0)
    
    # Execute long/short trades
    long_weight = long_base / np.mean([float(NUM_LONG),float(len(context.security_list))])
    short_weight = short_base / np.mean([float(NUM_SHORT),float(len(context.short_security_list))])
    
    for long_stock in context.security_list:
        if data.can_trade(long_stock):
            order_target_percent(long_stock, long_weight)
    
    numShort = count_shorts(context.portfolio.positions)
    for short_stock in context.short_security_list:
        if data.can_trade(short_stock) and numShort < NUM_SHORT:
            order_target_percent(short_stock, short_weight)
            if short_stock not in context.portfolio.positions.iterkeys():
                numShort += 1

def count_shorts(positions):
    numShort = 0
    for position in positions.itervalues():
        if position.amount < 0:
            numShort += 1
    return numShort

def record_vars(context, data):
    # Record beta variables
    context.portfolioCloses = np.append(context.portfolioCloses, context.portfolio.portfolio_value)
    context.benchmarkCloses = np.append(context.benchmarkCloses, data.history(sid(8554), 'price', 1, '1d')[0])
    
    # Plot variables at the end of each day.
    long_count = 0
    short_count = 0
    leverage = context.account.leverage
    unempl = context.unempl
    currUnempl = unempl[-1]
    pastUnempl = (unempl[-4] + unempl[-3] + unempl[-2]) / 3
    beta = context.beta
    
    log_str = "holding: "
    for position in context.portfolio.positions.itervalues():
        if position.amount > 0:
            long_count += 1
            log_str += position.sid.symbol + ", "
        if position.amount < 0:
            short_count += 1
            log_str += position.sid.symbol + "(short), "
    
    # Raise an alert if short_count or leverage out of contest range
    if short_count == 0:
        short_count = 99
    if leverage > 3:
        leverage = 99
    
    # Plot the counts
    #record(num_long=long_count, num_short=short_count, currUnempl=currUnempl, pastUnempl=pastUnempl, leverage=leverage)
    record(short_count=short_count, leverage=leverage, beta=beta)
    #log.info(log_str)

def build_unempl_collection():
    unempl_list = [
        5.3, 5.2, 5.2, 5.1, 4.9, 5, 4.9, 4.8, 4.9, 4.7, 4.6, 4.7,
        4.6, 4.6, 4.7, 4.3, 4.4, 4.5, 4.5, 4.5, 4.6, 4.5, 4.4, 4.4,
        4.3, 4.4, 4.2, 4.3, 4.2, 4.3, 4.3, 4.2, 4.2, 4.1, 4.1, 4,
        4, 4.1, 4, 3.8, 4, 4, 4, 4.1, 3.9, 3.9, 3.9, 3.9, 4.2, 4.2,
        4.3, 4.4, 4.3, 4.5, 4.6, 4.9, 5, 5.3, 5.5, 5.7, 5.7, 5.7,
        5.7, 5.9, 5.8, 5.8, 5.8, 5.7, 5.7, 5.7, 5.9, 6, 5.8, 5.9,
        5.9, 6, 6.1, 6.3, 6.2, 6.1, 6.1, 6, 5.8, 5.7, 5.7, 5.6, 5.8,
        5.6, 5.6, 5.6, 5.5, 5.4, 5.4, 5.5, 5.4, 5.4, 5.3, 5.4, 5.2,
        5.2, 5.1, 5, 5, 4.9, 5, 5, 5, 4.9, 4.7, 4.8, 4.7, 4.7, 4.6,
        4.6, 4.7, 4.7, 4.5, 4.4, 4.5, 4.4, 4.6, 4.5, 4.4, 4.5, 4.4,
        4.6, 4.7, 4.6, 4.7, 4.7, 4.7, 5, 5, 4.9, 5.1, 5, 5.4, 5.6,
        5.8, 6.1, 6.1, 6.5, 6.8, 7.3, 7.8, 8.3, 8.7, 9, 9.4, 9.5,
        9.5, 9.6, 9.8, 10, 9.9, 9.9, 9.8, 9.8, 9.9, 9.9, 9.6, 9.4,
        9.4, 9.5, 9.5, 9.4, 9.8, 9.3, 9.1, 9, 9, 9.1, 9, 9.1, 9, 9,
        9, 8.8, 8.6, 8.5, 8.3, 8.3, 8.2, 8.2, 8.2, 8.2, 8.2, 8.1,
        7.8, 7.8, 7.7, 7.9, 8, 7.7, 7.5, 7.6, 7.5, 7.5, 7.3, 7.3,
        7.3, 7.2, 6.9, 6.7, 6.6, 6.7, 6.7, 6.2, 6.2, 6.1, 6.2, 6.2,
        6, 5.7, 5.8, 5.6, 5.7, 5.5, 5.5, 5.4, 5.5, 5.3, 5.3, 5.1,
        5.1, 5, 5, 5, 4.9, 4.9, 5.0, 5.0, 4.7, 4.9, 4.9, 4.9, 5.0, 
        4.9, 4.6]
    
    # Strip future values
    now = get_datetime()
    monthOffset = ((now.year - 1997) * 12) + now.month
    unempl_list = unempl_list[:monthOffset]
    
    return unempl_list

def estimateBeta(priceY,priceX):  
    algorithm_returns = (priceY / np.roll(priceY,1))[1:31]
    benchmark_returns = (priceX / np.roll(priceX,1))[1:31]  
    if len(algorithm_returns) <> len(benchmark_returns):  
        minlen = min(len(algorithm_returns), len(benchmark_returns))  
        if minlen > 2:  
            algorithm_returns = algorithm_returns[-minlen:]  
            benchmark_returns = benchmark_returns[-minlen:]  
        else:  
            return 1.00  
    returns_matrix = np.vstack([algorithm_returns, benchmark_returns])  
    C = np.cov(returns_matrix, ddof=1)  
    algorithm_covariance = C[0][1]  
    benchmark_variance = C[1][1]  
    beta = algorithm_covariance / benchmark_variance

    return beta

def scale(wild, a_lo, a_hi, b_lo, b_hi):  
    ''' Based on wild value relative to a_lo_hi range,  
          return its analog within b_hi_lo, with min b_lo and max b_hi  
    '''  
    return min(b_hi, max(b_lo, (b_hi * (wild - a_lo)) / (a_hi - a_lo)))